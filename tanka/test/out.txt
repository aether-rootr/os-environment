{
  "apiVersion": "tanka.dev/v1alpha1",
  "data": {
    "cluster_role_binding_kubernetes_dashboard_metrics_scraper": {
      "apiVersion": "rbac.authorization.k8s.io/v1",
      "kind": "ClusterRoleBinding",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-metrics-scraper"
      },
      "roleRef": {
        "apiGroup": "rbac.authorization.k8s.io",
        "kind": "ClusterRole",
        "name": "kubernetes-dashboard-metrics-scraper"
      },
      "subjects": [
        {
          "kind": "ServiceAccount",
          "name": "kubernetes-dashboard-metrics-scraper",
          "namespace": "kubernetes-dashboard"
        }
      ]
    },
    "cluster_role_kubernetes_dashboard_metrics_scraper": {
      "apiVersion": "rbac.authorization.k8s.io/v1",
      "kind": "ClusterRole",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-metrics-scraper"
      },
      "rules": [
        {
          "apiGroups": [
            "metrics.k8s.io"
          ],
          "resources": [
            "pods",
            "nodes"
          ],
          "verbs": [
            "get",
            "list",
            "watch"
          ]
        }
      ]
    },
    "config_map_kong_dbless_config": {
      "apiVersion": "v1",
      "data": {
        "kong.yml": "_format_version: \"3.0\"\nservices:\n  - name: auth\n    host: kubernetes-dashboard-auth\n    port: 8000\n    protocol: http\n    routes:\n      - name: authLogin\n        paths:\n          - /api/v1/login\n        strip_path: false\n      - name: authCsrf\n        paths:\n          - /api/v1/csrftoken/login\n        strip_path: false\n      - name: authMe\n        paths:\n          - /api/v1/me\n        strip_path: false\n  - name: api\n    host: kubernetes-dashboard-api\n    port: 8000\n    protocol: http\n    routes:\n      - name: api\n        paths:\n          - /api\n        strip_path: false\n      - name: metrics\n        paths:\n          - /metrics\n        strip_path: false\n  - name: web\n    host: kubernetes-dashboard-web\n    port: 8000\n    protocol: http\n    routes:\n      - name: root\n        paths:\n          - /\n        strip_path: false\n"
      },
      "kind": "ConfigMap",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kong-dbless-config"
      }
    },
    "config_map_kubernetes_dashboard_web_settings": {
      "apiVersion": "v1",
      "data": null,
      "kind": "ConfigMap",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-web-settings"
      }
    },
    "custom_resource_definition_ingressclassparameterses.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "ingressclassparameterses.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "kind": "IngressClassParameters",
          "listKind": "IngressClassParametersList",
          "plural": "ingressclassparameterses",
          "singular": "ingressclassparameters"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "schema": {
              "openAPIV3Schema": {
                "description": "IngressClassParameters is the Schema for the IngressClassParameters API.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "Spec is the IngressClassParameters specification.",
                    "properties": {
                      "enableLegacyRegexDetection": {
                        "default": false,
                        "description": "EnableLegacyRegexDetection automatically detects if ImplementationSpecific Ingress paths are regular expression\npaths using the legacy 2.x heuristic. The controller adds the \"~\" prefix to those paths if the Kong version is\n3.0 or higher.",
                        "type": "boolean"
                      },
                      "serviceUpstream": {
                        "default": false,
                        "description": "Offload load-balancing to kube-proxy or sidecar.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "served": true,
            "storage": true
          }
        ]
      }
    },
    "custom_resource_definition_kongclusterplugins.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "kongclusterplugins.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "KongClusterPlugin",
          "listKind": "KongClusterPluginList",
          "plural": "kongclusterplugins",
          "shortNames": [
            "kcp"
          ],
          "singular": "kongclusterplugin"
        },
        "scope": "Cluster",
        "versions": [
          {
            "additionalPrinterColumns": [
              {
                "description": "Name of the plugin",
                "jsonPath": ".plugin",
                "name": "Plugin-Type",
                "type": "string"
              },
              {
                "description": "Age",
                "jsonPath": ".metadata.creationTimestamp",
                "name": "Age",
                "type": "date"
              },
              {
                "description": "Indicates if the plugin is disabled",
                "jsonPath": ".disabled",
                "name": "Disabled",
                "priority": 1,
                "type": "boolean"
              },
              {
                "description": "Configuration of the plugin",
                "jsonPath": ".config",
                "name": "Config",
                "priority": 1,
                "type": "string"
              },
              {
                "jsonPath": ".status.conditions[?(@.type==\"Programmed\")].status",
                "name": "Programmed",
                "type": "string"
              }
            ],
            "name": "v1",
            "schema": {
              "openAPIV3Schema": {
                "description": "KongClusterPlugin is the Schema for the kongclusterplugins API.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "config": {
                    "description": "Config contains the plugin configuration. It's a list of keys and values\nrequired to configure the plugin.\nPlease read the documentation of the plugin being configured to set values\nin here. For any plugin in Kong, anything that goes in the `config` JSON\nkey in the Admin API request, goes into this property.\nOnly one of `config` or `configFrom` may be used in a KongClusterPlugin, not both at once.",
                    "type": "object",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "configFrom": {
                    "description": "ConfigFrom references a secret containing the plugin configuration.\nThis should be used when the plugin configuration contains sensitive information,\nsuch as AWS credentials in the Lambda plugin or the client secret in the OIDC plugin.\nOnly one of `config` or `configFrom` may be used in a KongClusterPlugin, not both at once.",
                    "properties": {
                      "secretKeyRef": {
                        "description": "Specifies a name, a namespace, and a key of a secret to refer to.",
                        "properties": {
                          "key": {
                            "description": "The key containing the value.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The secret containing the key.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "The namespace containing the secret.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "key",
                          "name",
                          "namespace"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "secretKeyRef"
                    ],
                    "type": "object"
                  },
                  "configPatches": {
                    "description": "ConfigPatches represents JSON patches to the configuration of the plugin.\nEach item means a JSON patch to add something in the configuration,\nwhere path is specified in `path` and value is in `valueFrom` referencing\na key in a secret.\nWhen Config is specified, patches will be applied to the configuration in Config.\nOtherwise, patches will be applied to an empty object.",
                    "items": {
                      "description": "NamespacedConfigPatch is a JSON patch to add values from secrets to KongClusterPlugin\nto the generated configuration of plugin in Kong.",
                      "properties": {
                        "path": {
                          "description": "Path is the JSON path to add the patch.",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "ValueFrom is the reference to a key of a secret where the patched value comes from.",
                          "properties": {
                            "secretKeyRef": {
                              "description": "Specifies a name, a namespace, and a key of a secret to refer to.",
                              "properties": {
                                "key": {
                                  "description": "The key containing the value.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The secret containing the key.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "The namespace containing the secret.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "key",
                                "name",
                                "namespace"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "secretKeyRef"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "path",
                        "valueFrom"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "consumerRef": {
                    "description": "ConsumerRef is a reference to a particular consumer.",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Disabled set if the plugin is disabled or not.",
                    "type": "boolean"
                  },
                  "instance_name": {
                    "description": "InstanceName is an optional custom name to identify an instance of the plugin. This is useful when running the\nsame plugin in multiple contexts, for example, on multiple services.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "ordering": {
                    "description": "Ordering overrides the normal plugin execution order. It's only available on Kong Enterprise.\n`\u003cphase\u003e` is a request processing phase (for example, `access` or `body_filter`) and\n`\u003cplugin\u003e` is the name of the plugin that will run before or after the KongPlugin.\nFor example, a KongPlugin with `plugin: rate-limiting` and `before.access: [\"key-auth\"]`\nwill create a rate limiting plugin that limits requests _before_ they are authenticated.",
                    "properties": {
                      "after": {
                        "additionalProperties": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "description": "PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order",
                        "type": "object"
                      },
                      "before": {
                        "additionalProperties": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "description": "PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order",
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "plugin": {
                    "description": "PluginName is the name of the plugin to which to apply the config.",
                    "type": "string"
                  },
                  "protocols": {
                    "description": "Protocols configures plugin to run on requests received on specific\nprotocols.",
                    "items": {
                      "description": "KongProtocol is a valid Kong protocol.\nThis alias is necessary to deal with https://github.com/kubernetes-sigs/controller-tools/issues/342",
                      "enum": [
                        "http",
                        "https",
                        "grpc",
                        "grpcs",
                        "tcp",
                        "tls",
                        "udp"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "run_on": {
                    "description": "RunOn configures the plugin to run on the first or the second or both\nnodes in case of a service mesh deployment.",
                    "enum": [
                      "first",
                      "second",
                      "all"
                    ],
                    "type": "string"
                  },
                  "status": {
                    "description": "Status represents the current status of the KongClusterPlugin resource.",
                    "properties": {
                      "conditions": {
                        "default": [
                          {
                            "lastTransitionTime": "1970-01-01T00:00:00Z",
                            "message": "Waiting for controller",
                            "reason": "Pending",
                            "status": "Unknown",
                            "type": "Programmed"
                          }
                        ],
                        "description": "Conditions describe the current conditions of the KongClusterPluginStatus.\n\n\nKnown condition types are:\n\n\n* \"Programmed\"",
                        "items": {
                          "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                          "properties": {
                            "lastTransitionTime": {
                              "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "message": {
                              "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                              "maxLength": 32768,
                              "type": "string"
                            },
                            "observedGeneration": {
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "reason": {
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                              "maxLength": 1024,
                              "minLength": 1,
                              "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                              "type": "string"
                            },
                            "status": {
                              "description": "status of the condition, one of True, False, Unknown.",
                              "enum": [
                                "True",
                                "False",
                                "Unknown"
                              ],
                              "type": "string"
                            },
                            "type": {
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                              "maxLength": 316,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                              "type": "string"
                            }
                          },
                          "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                          ],
                          "type": "object"
                        },
                        "maxItems": 8,
                        "type": "array",
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-list-type": "map"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "plugin"
                ],
                "type": "object",
                "x-kubernetes-validations": [
                  {
                    "message": "Using both config and configFrom fields is not allowed.",
                    "rule": "!(has(self.config) \u0026\u0026 has(self.configFrom))"
                  },
                  {
                    "message": "Using both configFrom and configPatches fields is not allowed.",
                    "rule": "!(has(self.configFrom) \u0026\u0026 has(self.configPatches))"
                  },
                  {
                    "message": "The plugin field is immutable",
                    "rule": "self.plugin == oldSelf.plugin"
                  }
                ]
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_kongconsumergroups.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "kongconsumergroups.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "KongConsumerGroup",
          "listKind": "KongConsumerGroupList",
          "plural": "kongconsumergroups",
          "shortNames": [
            "kcg"
          ],
          "singular": "kongconsumergroup"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "additionalPrinterColumns": [
              {
                "description": "Age",
                "jsonPath": ".metadata.creationTimestamp",
                "name": "Age",
                "type": "date"
              },
              {
                "jsonPath": ".status.conditions[?(@.type==\"Programmed\")].status",
                "name": "Programmed",
                "type": "string"
              }
            ],
            "name": "v1beta1",
            "schema": {
              "openAPIV3Schema": {
                "description": "KongConsumerGroup is the Schema for the kongconsumergroups API.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "status": {
                    "description": "Status represents the current status of the KongConsumerGroup resource.",
                    "properties": {
                      "conditions": {
                        "default": [
                          {
                            "lastTransitionTime": "1970-01-01T00:00:00Z",
                            "message": "Waiting for controller",
                            "reason": "Pending",
                            "status": "Unknown",
                            "type": "Programmed"
                          }
                        ],
                        "description": "Conditions describe the current conditions of the KongConsumerGroup.\n\n\nKnown condition types are:\n\n\n* \"Programmed\"",
                        "items": {
                          "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                          "properties": {
                            "lastTransitionTime": {
                              "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "message": {
                              "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                              "maxLength": 32768,
                              "type": "string"
                            },
                            "observedGeneration": {
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "reason": {
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                              "maxLength": 1024,
                              "minLength": 1,
                              "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                              "type": "string"
                            },
                            "status": {
                              "description": "status of the condition, one of True, False, Unknown.",
                              "enum": [
                                "True",
                                "False",
                                "Unknown"
                              ],
                              "type": "string"
                            },
                            "type": {
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                              "maxLength": 316,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                              "type": "string"
                            }
                          },
                          "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                          ],
                          "type": "object"
                        },
                        "maxItems": 8,
                        "type": "array",
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-list-type": "map"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_kongconsumers.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "kongconsumers.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "KongConsumer",
          "listKind": "KongConsumerList",
          "plural": "kongconsumers",
          "shortNames": [
            "kc"
          ],
          "singular": "kongconsumer"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "additionalPrinterColumns": [
              {
                "description": "Username of a Kong Consumer",
                "jsonPath": ".username",
                "name": "Username",
                "type": "string"
              },
              {
                "description": "Age",
                "jsonPath": ".metadata.creationTimestamp",
                "name": "Age",
                "type": "date"
              },
              {
                "jsonPath": ".status.conditions[?(@.type==\"Programmed\")].status",
                "name": "Programmed",
                "type": "string"
              }
            ],
            "name": "v1",
            "schema": {
              "openAPIV3Schema": {
                "description": "KongConsumer is the Schema for the kongconsumers API.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "consumerGroups": {
                    "description": "ConsumerGroups are references to consumer groups (that consumer wants to be part of)\nprovisioned in Kong.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "credentials": {
                    "description": "Credentials are references to secrets containing a credential to be\nprovisioned in Kong.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "custom_id": {
                    "description": "CustomID is a Kong cluster-unique existing ID for the consumer - useful for mapping\nKong with users in your existing database.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "status": {
                    "description": "Status represents the current status of the KongConsumer resource.",
                    "properties": {
                      "conditions": {
                        "default": [
                          {
                            "lastTransitionTime": "1970-01-01T00:00:00Z",
                            "message": "Waiting for controller",
                            "reason": "Pending",
                            "status": "Unknown",
                            "type": "Programmed"
                          }
                        ],
                        "description": "Conditions describe the current conditions of the KongConsumer.\n\n\nKnown condition types are:\n\n\n* \"Programmed\"",
                        "items": {
                          "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                          "properties": {
                            "lastTransitionTime": {
                              "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "message": {
                              "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                              "maxLength": 32768,
                              "type": "string"
                            },
                            "observedGeneration": {
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "reason": {
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                              "maxLength": 1024,
                              "minLength": 1,
                              "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                              "type": "string"
                            },
                            "status": {
                              "description": "status of the condition, one of True, False, Unknown.",
                              "enum": [
                                "True",
                                "False",
                                "Unknown"
                              ],
                              "type": "string"
                            },
                            "type": {
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                              "maxLength": 316,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                              "type": "string"
                            }
                          },
                          "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                          ],
                          "type": "object"
                        },
                        "maxItems": 8,
                        "type": "array",
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-list-type": "map"
                      }
                    },
                    "type": "object"
                  },
                  "username": {
                    "description": "Username is a Kong cluster-unique username of the consumer.",
                    "type": "string"
                  }
                },
                "type": "object",
                "x-kubernetes-validations": [
                  {
                    "message": "Need to provide either username or custom_id",
                    "rule": "has(self.username) || has(self.custom_id)"
                  }
                ]
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_kongingresses.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "kongingresses.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "KongIngress",
          "listKind": "KongIngressList",
          "plural": "kongingresses",
          "shortNames": [
            "ki"
          ],
          "singular": "kongingress"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1",
            "schema": {
              "openAPIV3Schema": {
                "description": "KongIngress is the Schema for the kongingresses API.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "proxy": {
                    "description": "Proxy defines additional connection options for the routes to be configured in the\nKong Gateway, e.g. `connection_timeout`, `retries`, etc.",
                    "properties": {
                      "connect_timeout": {
                        "description": "The timeout in milliseconds for\testablishing a connection to the upstream server.\nDeprecated: use Service's \"konghq.com/connect-timeout\" annotation instead.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "path": {
                        "description": "(optional) The path to be used in requests to the upstream server.\nDeprecated: use Service's \"konghq.com/path\" annotation instead.",
                        "pattern": "^/.*$",
                        "type": "string"
                      },
                      "protocol": {
                        "description": "The protocol used to communicate with the upstream.\nDeprecated: use Service's \"konghq.com/protocol\" annotation instead.",
                        "enum": [
                          "http",
                          "https",
                          "grpc",
                          "grpcs",
                          "tcp",
                          "tls",
                          "udp"
                        ],
                        "type": "string"
                      },
                      "read_timeout": {
                        "description": "The timeout in milliseconds between two successive read operations\nfor transmitting a request to the upstream server.\nDeprecated: use Service's \"konghq.com/read-timeout\" annotation instead.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "retries": {
                        "description": "The number of retries to execute upon failure to proxy.\nDeprecated: use Service's \"konghq.com/retries\" annotation instead.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "write_timeout": {
                        "description": "The timeout in milliseconds between two successive write operations\nfor transmitting a request to the upstream server.\nDeprecated: use Service's \"konghq.com/write-timeout\" annotation instead.",
                        "minimum": 0,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "route": {
                    "description": "Route define rules to match client requests.\nEach Route is associated with a Service,\nand a Service may have multiple Routes associated to it.",
                    "properties": {
                      "headers": {
                        "additionalProperties": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "description": "Headers contains one or more lists of values indexed by header name\nthat will cause this Route to match if present in the request.\nThe Host header cannot be used with this attribute.\nDeprecated: use Ingress' \"konghq.com/headers\" annotation instead.",
                        "type": "object"
                      },
                      "https_redirect_status_code": {
                        "description": "HTTPSRedirectStatusCode is the status code Kong responds with\nwhen all properties of a Route match except the protocol.\nDeprecated: use Ingress' \"ingress.kubernetes.io/force-ssl-redirect\" or\n\"konghq.com/https-redirect-status-code\" annotations instead.",
                        "type": "integer"
                      },
                      "methods": {
                        "description": "Methods is a list of HTTP methods that match this Route.\nDeprecated: use Ingress' \"konghq.com/methods\" annotation instead.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "path_handling": {
                        "description": "PathHandling controls how the Service path, Route path and requested path\nare combined when sending a request to the upstream.\nDeprecated: use Ingress' \"konghq.com/path-handling\" annotation instead.",
                        "enum": [
                          "v0",
                          "v1"
                        ],
                        "type": "string"
                      },
                      "preserve_host": {
                        "description": "PreserveHost sets When matching a Route via one of the hosts domain names,\nuse the request Host header in the upstream request headers.\nIf set to false, the upstream Host header will be that of the Service’s host.\nDeprecated: use Ingress' \"konghq.com/preserve-host\" annotation instead.",
                        "type": "boolean"
                      },
                      "protocols": {
                        "description": "Protocols is an array of the protocols this Route should allow.\nDeprecated: use Ingress' \"konghq.com/protocols\" annotation instead.",
                        "items": {
                          "description": "KongProtocol is a valid Kong protocol.\nThis alias is necessary to deal with https://github.com/kubernetes-sigs/controller-tools/issues/342",
                          "enum": [
                            "http",
                            "https",
                            "grpc",
                            "grpcs",
                            "tcp",
                            "tls",
                            "udp"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "regex_priority": {
                        "description": "RegexPriority is a number used to choose which route resolves a given request\nwhen several routes match it using regexes simultaneously.\nDeprecated: use Ingress' \"konghq.com/regex-priority\" annotation instead.",
                        "type": "integer"
                      },
                      "request_buffering": {
                        "description": "RequestBuffering sets whether to enable request body buffering or not.\nDeprecated: use Ingress' \"konghq.com/request-buffering\" annotation instead.",
                        "type": "boolean"
                      },
                      "response_buffering": {
                        "description": "ResponseBuffering sets whether to enable response body buffering or not.\nDeprecated: use Ingress' \"konghq.com/response-buffering\" annotation instead.",
                        "type": "boolean"
                      },
                      "snis": {
                        "description": "SNIs is a list of SNIs that match this Route when using stream routing.\nDeprecated: use Ingress' \"konghq.com/snis\" annotation instead.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "strip_path": {
                        "description": "StripPath sets When matching a Route via one of the paths\nstrip the matching prefix from the upstream request URL.\nDeprecated: use Ingress' \"konghq.com/strip-path\" annotation instead.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "upstream": {
                    "description": "Upstream represents a virtual hostname and can be used to loadbalance\nincoming requests over multiple targets (e.g. Kubernetes `Services` can\nbe a target, OR `Endpoints` can be targets).",
                    "properties": {
                      "algorithm": {
                        "description": "Algorithm is the load balancing algorithm to use.\nAccepted values are: \"round-robin\", \"consistent-hashing\", \"least-connections\", \"latency\".",
                        "enum": [
                          "round-robin",
                          "consistent-hashing",
                          "least-connections",
                          "latency"
                        ],
                        "type": "string"
                      },
                      "hash_fallback": {
                        "description": "HashFallback defines What to use as hashing input\nif the primary hash_on does not return a hash.\nAccepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\".",
                        "type": "string"
                      },
                      "hash_fallback_header": {
                        "description": "HashFallbackHeader is the header name to take the value from as hash input.\nOnly required when \"hash_fallback\" is set to \"header\".",
                        "type": "string"
                      },
                      "hash_fallback_query_arg": {
                        "description": "HashFallbackQueryArg is the \"hash_fallback\" version of HashOnQueryArg.",
                        "type": "string"
                      },
                      "hash_fallback_uri_capture": {
                        "description": "HashFallbackURICapture is the \"hash_fallback\" version of HashOnURICapture.",
                        "type": "string"
                      },
                      "hash_on": {
                        "description": "HashOn defines what to use as hashing input.\nAccepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\", \"path\", \"query_arg\", \"uri_capture\".",
                        "type": "string"
                      },
                      "hash_on_cookie": {
                        "description": "The cookie name to take the value from as hash input.\nOnly required when \"hash_on\" or \"hash_fallback\" is set to \"cookie\".",
                        "type": "string"
                      },
                      "hash_on_cookie_path": {
                        "description": "The cookie path to set in the response headers.\nOnly required when \"hash_on\" or \"hash_fallback\" is set to \"cookie\".",
                        "type": "string"
                      },
                      "hash_on_header": {
                        "description": "HashOnHeader defines the header name to take the value from as hash input.\nOnly required when \"hash_on\" is set to \"header\".",
                        "type": "string"
                      },
                      "hash_on_query_arg": {
                        "description": "HashOnQueryArg is the query string parameter whose value is the hash input when \"hash_on\" is set to \"query_arg\".",
                        "type": "string"
                      },
                      "hash_on_uri_capture": {
                        "description": "HashOnURICapture is the name of the capture group whose value is the hash input when \"hash_on\" is set to\n\"uri_capture\".",
                        "type": "string"
                      },
                      "healthchecks": {
                        "description": "Healthchecks defines the health check configurations in Kong.",
                        "properties": {
                          "active": {
                            "description": "ActiveHealthcheck configures active health check probing.",
                            "properties": {
                              "concurrency": {
                                "minimum": 1,
                                "type": "integer"
                              },
                              "headers": {
                                "additionalProperties": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "type": "object"
                              },
                              "healthy": {
                                "description": "Healthy configures thresholds and HTTP status codes\nto mark targets healthy for an upstream.",
                                "properties": {
                                  "http_statuses": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "interval": {
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "successes": {
                                    "minimum": 0,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "http_path": {
                                "pattern": "^/.*$",
                                "type": "string"
                              },
                              "https_sni": {
                                "type": "string"
                              },
                              "https_verify_certificate": {
                                "type": "boolean"
                              },
                              "timeout": {
                                "minimum": 0,
                                "type": "integer"
                              },
                              "type": {
                                "type": "string"
                              },
                              "unhealthy": {
                                "description": "Unhealthy configures thresholds and HTTP status codes\nto mark targets unhealthy.",
                                "properties": {
                                  "http_failures": {
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "http_statuses": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "interval": {
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "tcp_failures": {
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "timeouts": {
                                    "minimum": 0,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "passive": {
                            "description": "PassiveHealthcheck configures passive checks around\npassive health checks.",
                            "properties": {
                              "healthy": {
                                "description": "Healthy configures thresholds and HTTP status codes\nto mark targets healthy for an upstream.",
                                "properties": {
                                  "http_statuses": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "interval": {
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "successes": {
                                    "minimum": 0,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "type": "string"
                              },
                              "unhealthy": {
                                "description": "Unhealthy configures thresholds and HTTP status codes\nto mark targets unhealthy.",
                                "properties": {
                                  "http_failures": {
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "http_statuses": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "interval": {
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "tcp_failures": {
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "timeouts": {
                                    "minimum": 0,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "threshold": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "host_header": {
                        "description": "HostHeader is The hostname to be used as Host header\nwhen proxying requests through Kong.",
                        "type": "string"
                      },
                      "slots": {
                        "description": "Slots is the number of slots in the load balancer algorithm.",
                        "minimum": 10,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object",
                "x-kubernetes-validations": [
                  {
                    "message": "'proxy' field is no longer supported, use Service's annotations instead",
                    "rule": "!has(self.proxy)"
                  },
                  {
                    "message": "'route' field is no longer supported, use Ingress' annotations instead",
                    "rule": "!has(self.route)"
                  }
                ]
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_konglicenses.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "konglicenses.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "KongLicense",
          "listKind": "KongLicenseList",
          "plural": "konglicenses",
          "shortNames": [
            "kl"
          ],
          "singular": "konglicense"
        },
        "scope": "Cluster",
        "versions": [
          {
            "additionalPrinterColumns": [
              {
                "description": "Age",
                "jsonPath": ".metadata.creationTimestamp",
                "name": "Age",
                "type": "date"
              },
              {
                "description": "Enabled to configure on Kong gateway instances",
                "jsonPath": ".enabled",
                "name": "Enabled",
                "type": "boolean"
              }
            ],
            "name": "v1alpha1",
            "schema": {
              "openAPIV3Schema": {
                "description": "KongLicense stores a Kong enterprise license to apply to managed Kong gateway instances.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "enabled": {
                    "default": true,
                    "description": "Enabled is set to true to let controllers (like KIC or KGO) to reconcile it.\nDefault value is true to apply the license by default.",
                    "type": "boolean"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "rawLicenseString": {
                    "description": "RawLicenseString is a string with the raw content of the license.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the status of the KongLicense being processed by controllers.",
                    "properties": {
                      "controllers": {
                        "items": {
                          "description": "KongLicenseControllerStatus is the status of owning KongLicense being processed\nidentified by the controllerName field.",
                          "properties": {
                            "conditions": {
                              "default": [
                                {
                                  "lastTransitionTime": "1970-01-01T00:00:00Z",
                                  "message": "Waiting for controller",
                                  "reason": "Pending",
                                  "status": "Unknown",
                                  "type": "Programmed"
                                }
                              ],
                              "description": "Conditions describe the current conditions of the KongLicense on the controller.",
                              "items": {
                                "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                                "properties": {
                                  "lastTransitionTime": {
                                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                                    "maxLength": 32768,
                                    "type": "string"
                                  },
                                  "observedGeneration": {
                                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "reason": {
                                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                                    "maxLength": 1024,
                                    "minLength": 1,
                                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "status of the condition, one of True, False, Unknown.",
                                    "enum": [
                                      "True",
                                      "False",
                                      "Unknown"
                                    ],
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                    "maxLength": 316,
                                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "lastTransitionTime",
                                  "message",
                                  "reason",
                                  "status",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "maxItems": 8,
                              "type": "array",
                              "x-kubernetes-list-map-keys": [
                                "type"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "controllerName": {
                              "description": "ControllerName is an identifier of the controller to reconcile this KongLicense.\nShould be unique in the list of controller statuses.",
                              "type": "string"
                            },
                            "controllerRef": {
                              "description": "ControllerRef is the reference of the controller to reconcile this KongLicense.\nIt is usually the name of (KIC/KGO) pod that reconciles it.",
                              "properties": {
                                "group": {
                                  "description": "Group is the group of referent.\nIt should be empty if the referent is in \"core\" group (like pod).",
                                  "maxLength": 253,
                                  "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind is the kind of the referent.\nBy default the nil kind means kind Pod.",
                                  "maxLength": 63,
                                  "minLength": 1,
                                  "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of the referent.",
                                  "maxLength": 253,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace is the namespace of the referent.\nIt should be empty if the referent is cluster scoped.",
                                  "maxLength": 63,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "controllerName"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-map-keys": [
                          "controllerName"
                        ],
                        "x-kubernetes-list-type": "map"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "enabled",
                  "rawLicenseString"
                ],
                "type": "object"
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_kongplugins.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "kongplugins.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "KongPlugin",
          "listKind": "KongPluginList",
          "plural": "kongplugins",
          "shortNames": [
            "kp"
          ],
          "singular": "kongplugin"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "additionalPrinterColumns": [
              {
                "description": "Name of the plugin",
                "jsonPath": ".plugin",
                "name": "Plugin-Type",
                "type": "string"
              },
              {
                "description": "Age",
                "jsonPath": ".metadata.creationTimestamp",
                "name": "Age",
                "type": "date"
              },
              {
                "description": "Indicates if the plugin is disabled",
                "jsonPath": ".disabled",
                "name": "Disabled",
                "priority": 1,
                "type": "boolean"
              },
              {
                "description": "Configuration of the plugin",
                "jsonPath": ".config",
                "name": "Config",
                "priority": 1,
                "type": "string"
              },
              {
                "jsonPath": ".status.conditions[?(@.type==\"Programmed\")].status",
                "name": "Programmed",
                "type": "string"
              }
            ],
            "name": "v1",
            "schema": {
              "openAPIV3Schema": {
                "description": "KongPlugin is the Schema for the kongplugins API.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "config": {
                    "description": "Config contains the plugin configuration. It's a list of keys and values\nrequired to configure the plugin.\nPlease read the documentation of the plugin being configured to set values\nin here. For any plugin in Kong, anything that goes in the `config` JSON\nkey in the Admin API request, goes into this property.\nOnly one of `config` or `configFrom` may be used in a KongPlugin, not both at once.",
                    "type": "object",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "configFrom": {
                    "description": "ConfigFrom references a secret containing the plugin configuration.\nThis should be used when the plugin configuration contains sensitive information,\nsuch as AWS credentials in the Lambda plugin or the client secret in the OIDC plugin.\nOnly one of `config` or `configFrom` may be used in a KongPlugin, not both at once.",
                    "properties": {
                      "secretKeyRef": {
                        "description": "Specifies a name and a key of a secret to refer to. The namespace is implicitly set to the one of referring object.",
                        "properties": {
                          "key": {
                            "description": "The key containing the value.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The secret containing the key.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "key",
                          "name"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "secretKeyRef"
                    ],
                    "type": "object"
                  },
                  "configPatches": {
                    "description": "ConfigPatches represents JSON patches to the configuration of the plugin.\nEach item means a JSON patch to add something in the configuration,\nwhere path is specified in `path` and value is in `valueFrom` referencing\na key in a secret.\nWhen Config is specified, patches will be applied to the configuration in Config.\nOtherwise, patches will be applied to an empty object.",
                    "items": {
                      "description": "ConfigPatch is a JSON patch (RFC6902) to add values from Secret to the generated configuration.\nIt is an equivalent of the following patch:\n`{\"op\": \"add\", \"path\": {.Path}, \"value\": {.ComputedValueFrom}}`.",
                      "properties": {
                        "path": {
                          "description": "Path is the JSON-Pointer value (RFC6901) that references a location within the target configuration.",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "ValueFrom is the reference to a key of a secret where the patched value comes from.",
                          "properties": {
                            "secretKeyRef": {
                              "description": "Specifies a name and a key of a secret to refer to. The namespace is implicitly set to the one of referring object.",
                              "properties": {
                                "key": {
                                  "description": "The key containing the value.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The secret containing the key.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "key",
                                "name"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "secretKeyRef"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "path",
                        "valueFrom"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "consumerRef": {
                    "description": "ConsumerRef is a reference to a particular consumer.",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Disabled set if the plugin is disabled or not.",
                    "type": "boolean"
                  },
                  "instance_name": {
                    "description": "InstanceName is an optional custom name to identify an instance of the plugin. This is useful when running the\nsame plugin in multiple contexts, for example, on multiple services.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "ordering": {
                    "description": "Ordering overrides the normal plugin execution order. It's only available on Kong Enterprise.\n`\u003cphase\u003e` is a request processing phase (for example, `access` or `body_filter`) and\n`\u003cplugin\u003e` is the name of the plugin that will run before or after the KongPlugin.\nFor example, a KongPlugin with `plugin: rate-limiting` and `before.access: [\"key-auth\"]`\nwill create a rate limiting plugin that limits requests _before_ they are authenticated.",
                    "properties": {
                      "after": {
                        "additionalProperties": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "description": "PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order",
                        "type": "object"
                      },
                      "before": {
                        "additionalProperties": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "description": "PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order",
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "plugin": {
                    "description": "PluginName is the name of the plugin to which to apply the config.",
                    "type": "string"
                  },
                  "protocols": {
                    "description": "Protocols configures plugin to run on requests received on specific\nprotocols.",
                    "items": {
                      "description": "KongProtocol is a valid Kong protocol.\nThis alias is necessary to deal with https://github.com/kubernetes-sigs/controller-tools/issues/342",
                      "enum": [
                        "http",
                        "https",
                        "grpc",
                        "grpcs",
                        "tcp",
                        "tls",
                        "udp"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "run_on": {
                    "description": "RunOn configures the plugin to run on the first or the second or both\nnodes in case of a service mesh deployment.",
                    "enum": [
                      "first",
                      "second",
                      "all"
                    ],
                    "type": "string"
                  },
                  "status": {
                    "description": "Status represents the current status of the KongPlugin resource.",
                    "properties": {
                      "conditions": {
                        "default": [
                          {
                            "lastTransitionTime": "1970-01-01T00:00:00Z",
                            "message": "Waiting for controller",
                            "reason": "Pending",
                            "status": "Unknown",
                            "type": "Programmed"
                          }
                        ],
                        "description": "Conditions describe the current conditions of the KongPluginStatus.\n\n\nKnown condition types are:\n\n\n* \"Programmed\"",
                        "items": {
                          "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                          "properties": {
                            "lastTransitionTime": {
                              "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "message": {
                              "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                              "maxLength": 32768,
                              "type": "string"
                            },
                            "observedGeneration": {
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "reason": {
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                              "maxLength": 1024,
                              "minLength": 1,
                              "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                              "type": "string"
                            },
                            "status": {
                              "description": "status of the condition, one of True, False, Unknown.",
                              "enum": [
                                "True",
                                "False",
                                "Unknown"
                              ],
                              "type": "string"
                            },
                            "type": {
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                              "maxLength": 316,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                              "type": "string"
                            }
                          },
                          "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                          ],
                          "type": "object"
                        },
                        "maxItems": 8,
                        "type": "array",
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-list-type": "map"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "plugin"
                ],
                "type": "object",
                "x-kubernetes-validations": [
                  {
                    "message": "Using both config and configFrom fields is not allowed.",
                    "rule": "!(has(self.config) \u0026\u0026 has(self.configFrom))"
                  },
                  {
                    "message": "Using both configFrom and configPatches fields is not allowed.",
                    "rule": "!(has(self.configFrom) \u0026\u0026 has(self.configPatches))"
                  },
                  {
                    "message": "The plugin field is immutable",
                    "rule": "self.plugin == oldSelf.plugin"
                  }
                ]
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_kongupstreampolicies.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser",
          "gateway.networking.k8s.io/policy": "direct"
        },
        "name": "kongupstreampolicies.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "KongUpstreamPolicy",
          "listKind": "KongUpstreamPolicyList",
          "plural": "kongupstreampolicies",
          "shortNames": [
            "kup"
          ],
          "singular": "kongupstreampolicy"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1beta1",
            "schema": {
              "openAPIV3Schema": {
                "description": "KongUpstreamPolicy allows configuring algorithm that should be used for load balancing traffic between Kong\nUpstream's Targets. It also allows configuring health checks for Kong Upstream's Targets.\n\n\nIts configuration is similar to Kong Upstream object (https://docs.konghq.com/gateway/latest/admin-api/#upstream-object),\nand it is applied to Kong Upstream objects created by the controller.\n\n\nIt can be attached to Services. To attach it to a Service, it has to be annotated with\n`konghq.com/upstream-policy: \u003cname\u003e`, where `\u003cname\u003e` is the name of the KongUpstreamPolicy\nobject in the same namespace as the Service.\n\n\nWhen attached to a Service, it will affect all Kong Upstreams created for the Service.\n\n\nWhen attached to a Service used in a Gateway API *Route rule with multiple BackendRefs, all of its Services MUST\nbe configured with the same KongUpstreamPolicy. Otherwise, the controller will *ignore* the KongUpstreamPolicy.\n\n\nNote: KongUpstreamPolicy doesn't implement Gateway API's GEP-713 strictly.\nIn particular, it doesn't use the TargetRef for attaching to Services and Gateway API *Routes - annotations are\nused instead. This is to allow reusing the same KongUpstreamPolicy for multiple Services and Gateway API *Routes.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "Spec contains the configuration of the Kong upstream.",
                    "properties": {
                      "algorithm": {
                        "description": "Algorithm is the load balancing algorithm to use.\nAccepted values are: \"round-robin\", \"consistent-hashing\", \"least-connections\", \"latency\".",
                        "enum": [
                          "round-robin",
                          "consistent-hashing",
                          "least-connections",
                          "latency"
                        ],
                        "type": "string"
                      },
                      "hashOn": {
                        "description": "HashOn defines how to calculate hash for consistent-hashing load balancing algorithm.\nAlgorithm must be set to \"consistent-hashing\" for this field to have effect.",
                        "properties": {
                          "cookie": {
                            "description": "Cookie is the name of the cookie to use as hash input.",
                            "type": "string"
                          },
                          "cookiePath": {
                            "description": "CookiePath is cookie path to set in the response headers.",
                            "type": "string"
                          },
                          "header": {
                            "description": "Header is the name of the header to use as hash input.",
                            "type": "string"
                          },
                          "input": {
                            "description": "Input allows using one of the predefined inputs (ip, consumer, path).\nFor other parametrized inputs, use one of the fields below.",
                            "enum": [
                              "ip",
                              "consumer",
                              "path"
                            ],
                            "type": "string"
                          },
                          "queryArg": {
                            "description": "QueryArg is the name of the query argument to use as hash input.",
                            "type": "string"
                          },
                          "uriCapture": {
                            "description": "URICapture is the name of the URI capture group to use as hash input.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "hashOnFallback": {
                        "description": "HashOnFallback defines how to calculate hash for consistent-hashing load balancing algorithm if the primary hash\nfunction fails.\nAlgorithm must be set to \"consistent-hashing\" for this field to have effect.",
                        "properties": {
                          "cookie": {
                            "description": "Cookie is the name of the cookie to use as hash input.",
                            "type": "string"
                          },
                          "cookiePath": {
                            "description": "CookiePath is cookie path to set in the response headers.",
                            "type": "string"
                          },
                          "header": {
                            "description": "Header is the name of the header to use as hash input.",
                            "type": "string"
                          },
                          "input": {
                            "description": "Input allows using one of the predefined inputs (ip, consumer, path).\nFor other parametrized inputs, use one of the fields below.",
                            "enum": [
                              "ip",
                              "consumer",
                              "path"
                            ],
                            "type": "string"
                          },
                          "queryArg": {
                            "description": "QueryArg is the name of the query argument to use as hash input.",
                            "type": "string"
                          },
                          "uriCapture": {
                            "description": "URICapture is the name of the URI capture group to use as hash input.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "healthchecks": {
                        "description": "Healthchecks defines the health check configurations in Kong.",
                        "properties": {
                          "active": {
                            "description": "Active configures active health check probing.",
                            "properties": {
                              "concurrency": {
                                "description": "Concurrency is the number of targets to check concurrently.",
                                "minimum": 1,
                                "type": "integer"
                              },
                              "headers": {
                                "additionalProperties": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "description": "Headers is a list of HTTP headers to add to the probe request.",
                                "type": "object"
                              },
                              "healthy": {
                                "description": "Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.",
                                "properties": {
                                  "httpStatuses": {
                                    "description": "HTTPStatuses is a list of HTTP status codes that Kong considers a success.",
                                    "items": {
                                      "description": "HTTPStatus is an HTTP status code.",
                                      "maximum": 599,
                                      "minimum": 100,
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "interval": {
                                    "description": "Interval is the interval between active health checks for an upstream in seconds when in a healthy state.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "successes": {
                                    "description": "Successes is the number of successes to consider a target healthy.",
                                    "minimum": 0,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "httpPath": {
                                "description": "HTTPPath is the path to use in GET HTTP request to run as a probe.",
                                "pattern": "^/.*$",
                                "type": "string"
                              },
                              "httpsSni": {
                                "description": "HTTPSSNI is the SNI to use in GET HTTPS request to run as a probe.",
                                "type": "string"
                              },
                              "httpsVerifyCertificate": {
                                "description": "HTTPSVerifyCertificate is a boolean value that indicates if the certificate should be verified.",
                                "type": "boolean"
                              },
                              "timeout": {
                                "description": "Timeout is the probe timeout in seconds.",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "type": {
                                "description": "Type determines whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection.\nAccepted values are \"http\", \"https\", \"tcp\", \"grpc\", \"grpcs\".",
                                "enum": [
                                  "http",
                                  "https",
                                  "tcp",
                                  "grpc",
                                  "grpcs"
                                ],
                                "type": "string"
                              },
                              "unhealthy": {
                                "description": "Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy for an upstream.",
                                "properties": {
                                  "httpFailures": {
                                    "description": "HTTPFailures is the number of failures to consider a target unhealthy.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "httpStatuses": {
                                    "description": "HTTPStatuses is a list of HTTP status codes that Kong considers a failure.",
                                    "items": {
                                      "description": "HTTPStatus is an HTTP status code.",
                                      "maximum": 599,
                                      "minimum": 100,
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "interval": {
                                    "description": "Interval is the interval between active health checks for an upstream in seconds when in an unhealthy state.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "tcpFailures": {
                                    "description": "TCPFailures is the number of TCP failures in a row to consider a target unhealthy.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "timeouts": {
                                    "description": "Timeouts is the number of timeouts in a row to consider a target unhealthy.",
                                    "minimum": 0,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "passive": {
                            "description": "Passive configures passive health check probing.",
                            "properties": {
                              "healthy": {
                                "description": "Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.",
                                "properties": {
                                  "httpStatuses": {
                                    "description": "HTTPStatuses is a list of HTTP status codes that Kong considers a success.",
                                    "items": {
                                      "description": "HTTPStatus is an HTTP status code.",
                                      "maximum": 599,
                                      "minimum": 100,
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "interval": {
                                    "description": "Interval is the interval between active health checks for an upstream in seconds when in a healthy state.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "successes": {
                                    "description": "Successes is the number of successes to consider a target healthy.",
                                    "minimum": 0,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "description": "Type determines whether to perform passive health checks interpreting HTTP/HTTPS statuses,\nor just check for TCP connection success.\nAccepted values are \"http\", \"https\", \"tcp\", \"grpc\", \"grpcs\".",
                                "enum": [
                                  "http",
                                  "https",
                                  "tcp",
                                  "grpc",
                                  "grpcs"
                                ],
                                "type": "string"
                              },
                              "unhealthy": {
                                "description": "Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy.",
                                "properties": {
                                  "httpFailures": {
                                    "description": "HTTPFailures is the number of failures to consider a target unhealthy.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "httpStatuses": {
                                    "description": "HTTPStatuses is a list of HTTP status codes that Kong considers a failure.",
                                    "items": {
                                      "description": "HTTPStatus is an HTTP status code.",
                                      "maximum": 599,
                                      "minimum": 100,
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "interval": {
                                    "description": "Interval is the interval between active health checks for an upstream in seconds when in an unhealthy state.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "tcpFailures": {
                                    "description": "TCPFailures is the number of TCP failures in a row to consider a target unhealthy.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "timeouts": {
                                    "description": "Timeouts is the number of timeouts in a row to consider a target unhealthy.",
                                    "minimum": 0,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "threshold": {
                            "description": "Threshold is the minimum percentage of the upstream’s targets’ weight that must be available for the whole\nupstream to be considered healthy.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "slots": {
                        "description": "Slots is the number of slots in the load balancer algorithm.\nIf not set, the default value in Kong for the algorithm is used.",
                        "maximum": 65536,
                        "minimum": 10,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "status": {
                    "description": "Status defines the current state of KongUpstreamPolicy",
                    "properties": {
                      "ancestors": {
                        "description": "Ancestors is a list of ancestor resources (usually Gateways) that are\nassociated with the policy, and the status of the policy with respect to\neach ancestor. When this policy attaches to a parent, the controller that\nmanages the parent and the ancestors MUST add an entry to this list when\nthe controller first sees the policy and SHOULD update the entry as\nappropriate when the relevant ancestor is modified.\n\n\nNote that choosing the relevant ancestor is left to the Policy designers;\nan important part of Policy design is designing the right object level at\nwhich to namespace this status.\n\n\nNote also that implementations MUST ONLY populate ancestor status for\nthe Ancestor resources they are responsible for. Implementations MUST\nuse the ControllerName field to uniquely identify the entries in this list\nthat they are responsible for.\n\n\nNote that to achieve this, the list of PolicyAncestorStatus structs\nMUST be treated as a map with a composite key, made up of the AncestorRef\nand ControllerName fields combined.\n\n\nA maximum of 16 ancestors will be represented in this list. An empty list\nmeans the Policy is not relevant for any ancestors.\n\n\nIf this slice is full, implementations MUST NOT add further entries.\nInstead they MUST consider the policy unimplementable and signal that\non any related resources such as the ancestor that would be referenced\nhere. For example, if this list was full on BackendTLSPolicy, no\nadditional Gateways would be able to reference the Service targeted by\nthe BackendTLSPolicy.",
                        "items": {
                          "description": "PolicyAncestorStatus describes the status of a route with respect to an\nassociated Ancestor.\n\n\nAncestors refer to objects that are either the Target of a policy or above it\nin terms of object hierarchy. For example, if a policy targets a Service, the\nPolicy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and\nthe GatewayClass. Almost always, in this hierarchy, the Gateway will be the most\nuseful object to place Policy status on, so we recommend that implementations\nSHOULD use Gateway as the PolicyAncestorStatus object unless the designers\nhave a _very_ good reason otherwise.\n\n\nIn the context of policy attachment, the Ancestor is used to distinguish which\nresource results in a distinct application of this policy. For example, if a policy\ntargets a Service, it may have a distinct result per attached Gateway.\n\n\nPolicies targeting the same resource may have different effects depending on the\nancestors of those resources. For example, different Gateways targeting the same\nService may have different capabilities, especially if they have different underlying\nimplementations.\n\n\nFor example, in BackendTLSPolicy, the Policy attaches to a Service that is\nused as a backend in a HTTPRoute that is itself attached to a Gateway.\nIn this case, the relevant object for status is the Gateway, and that is the\nancestor object referred to in this status.\n\n\nNote that a parent is also an ancestor, so for objects where the parent is the\nrelevant object for status, this struct SHOULD still be used.\n\n\nThis struct is intended to be used in a slice that's effectively a map,\nwith a composite key made up of the AncestorRef and the ControllerName.",
                          "properties": {
                            "ancestorRef": {
                              "description": "AncestorRef corresponds with a ParentRef in the spec that this\nPolicyAncestorStatus struct describes the status of.",
                              "properties": {
                                "group": {
                                  "default": "gateway.networking.k8s.io",
                                  "description": "Group is the group of the referent.\nWhen unspecified, \"gateway.networking.k8s.io\" is inferred.\nTo set the core API group (such as for a \"Service\" kind referent),\nGroup must be explicitly set to \"\" (empty string).\n\n\nSupport: Core",
                                  "maxLength": 253,
                                  "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                                  "type": "string"
                                },
                                "kind": {
                                  "default": "Gateway",
                                  "description": "Kind is kind of the referent.\n\n\nThere are two kinds of parent resources with \"Core\" support:\n\n\n* Gateway (Gateway conformance profile)\n* Service (Mesh conformance profile, experimental, ClusterIP Services only)\n\n\nSupport for other resources is Implementation-Specific.",
                                  "maxLength": 63,
                                  "minLength": 1,
                                  "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of the referent.\n\n\nSupport: Core",
                                  "maxLength": 253,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace is the namespace of the referent. When unspecified, this refers\nto the local namespace of the Route.\n\n\nNote that there are specific rules for ParentRefs which cross namespace\nboundaries. Cross-namespace references are only valid if they are explicitly\nallowed by something in the namespace they are referring to. For example:\nGateway has the AllowedRoutes field, and ReferenceGrant provides a\ngeneric way to enable any other kind of cross-namespace reference.\n\n\n\u003cgateway:experimental:description\u003e\nParentRefs from a Route to a Service in the same namespace are \"producer\"\nroutes, which apply default routing rules to inbound connections from\nany namespace to the Service.\n\n\nParentRefs from a Route to a Service in a different namespace are\n\"consumer\" routes, and these routing rules are only applied to outbound\nconnections originating from the same namespace as the Route, for which\nthe intended destination of the connections are a Service targeted as a\nParentRef of the Route.\n\u003c/gateway:experimental:description\u003e\n\n\nSupport: Core",
                                  "maxLength": 63,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Port is the network port this Route targets. It can be interpreted\ndifferently based on the type of parent resource.\n\n\nWhen the parent resource is a Gateway, this targets all listeners\nlistening on the specified port that also support this kind of Route(and\nselect this Route). It's not recommended to set `Port` unless the\nnetworking behaviors specified in a Route must apply to a specific port\nas opposed to a listener(s) whose port(s) may be changed. When both Port\nand SectionName are specified, the name and port of the selected listener\nmust match both specified values.\n\n\n\u003cgateway:experimental:description\u003e\nWhen the parent resource is a Service, this targets a specific port in the\nService spec. When both Port (experimental) and SectionName are specified,\nthe name and port of the selected port must match both specified values.\n\u003c/gateway:experimental:description\u003e\n\n\nImplementations MAY choose to support other parent resources.\nImplementations supporting other types of parent resources MUST clearly\ndocument how/if Port is interpreted.\n\n\nFor the purpose of status, an attachment is considered successful as\nlong as the parent resource accepts it partially. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment\nfrom the referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route,\nthe Route MUST be considered detached from the Gateway.\n\n\nSupport: Extended\n\n\n\u003cgateway:experimental\u003e",
                                  "format": "int32",
                                  "maximum": 65535,
                                  "minimum": 1,
                                  "type": "integer"
                                },
                                "sectionName": {
                                  "description": "SectionName is the name of a section within the target resource. In the\nfollowing resources, SectionName is interpreted as the following:\n\n\n* Gateway: Listener Name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values.\n* Service: Port Name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values. Note that attaching Routes to Services as Parents\nis part of experimental Mesh support and is not supported for any other\npurpose.\n\n\nImplementations MAY choose to support attaching Routes to other resources.\nIf that is the case, they MUST clearly document how SectionName is\ninterpreted.\n\n\nWhen unspecified (empty string), this will reference the entire resource.\nFor the purpose of status, an attachment is considered successful if at\nleast one section in the parent resource accepts it. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\nthe referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route, the\nRoute MUST be considered detached from the Gateway.\n\n\nSupport: Core",
                                  "maxLength": 253,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name"
                              ],
                              "type": "object"
                            },
                            "conditions": {
                              "description": "Conditions describes the status of the Policy with respect to the given Ancestor.",
                              "items": {
                                "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                                "properties": {
                                  "lastTransitionTime": {
                                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                                    "maxLength": 32768,
                                    "type": "string"
                                  },
                                  "observedGeneration": {
                                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "reason": {
                                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                                    "maxLength": 1024,
                                    "minLength": 1,
                                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "status of the condition, one of True, False, Unknown.",
                                    "enum": [
                                      "True",
                                      "False",
                                      "Unknown"
                                    ],
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                    "maxLength": 316,
                                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "lastTransitionTime",
                                  "message",
                                  "reason",
                                  "status",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "maxItems": 8,
                              "minItems": 1,
                              "type": "array",
                              "x-kubernetes-list-map-keys": [
                                "type"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "controllerName": {
                              "description": "ControllerName is a domain/path string that indicates the name of the\ncontroller that wrote this status. This corresponds with the\ncontrollerName field on GatewayClass.\n\n\nExample: \"example.net/gateway-controller\".\n\n\nThe format of this field is DOMAIN \"/\" PATH, where DOMAIN and PATH are\nvalid Kubernetes names\n(https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n\n\nControllers MUST populate this field when writing status. Controllers should ensure that\nentries to status populated with their ControllerName are cleaned up when they are no\nlonger necessary.",
                              "maxLength": 253,
                              "minLength": 1,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$\u0026'()*+,;=:]+$",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ancestorRef",
                            "controllerName"
                          ],
                          "type": "object"
                        },
                        "maxItems": 16,
                        "type": "array"
                      }
                    },
                    "required": [
                      "ancestors"
                    ],
                    "type": "object"
                  }
                },
                "type": "object",
                "x-kubernetes-validations": [
                  {
                    "message": "Only one of spec.hashOn.(input|cookie|header|uriCapture|queryArg) can be set.",
                    "rule": "has(self.spec.hashOn) ? [has(self.spec.hashOn.input), has(self.spec.hashOn.cookie), has(self.spec.hashOn.header), has(self.spec.hashOn.uriCapture), has(self.spec.hashOn.queryArg)].filter(fieldSet, fieldSet == true).size() \u003c= 1 : true"
                  },
                  {
                    "message": "When spec.hashOn.cookie is set, spec.hashOn.cookiePath is required.",
                    "rule": "has(self.spec.hashOn) \u0026\u0026 has(self.spec.hashOn.cookie) ? has(self.spec.hashOn.cookiePath) : true"
                  },
                  {
                    "message": "When spec.hashOn.cookiePath is set, spec.hashOn.cookie is required.",
                    "rule": "has(self.spec.hashOn) \u0026\u0026 has(self.spec.hashOn.cookiePath) ? has(self.spec.hashOn.cookie) : true"
                  },
                  {
                    "message": "spec.algorithm must be set to \"consistent-hashing\" when spec.hashOn is set.",
                    "rule": "has(self.spec.hashOn) ? has(self.spec.algorithm) \u0026\u0026 self.spec.algorithm == \"consistent-hashing\" : true"
                  },
                  {
                    "message": "Only one of spec.hashOnFallback.(input|header|uriCapture|queryArg) can be set.",
                    "rule": "has(self.spec.hashOnFallback) ? [has(self.spec.hashOnFallback.input), has(self.spec.hashOnFallback.header), has(self.spec.hashOnFallback.uriCapture), has(self.spec.hashOnFallback.queryArg)].filter(fieldSet, fieldSet == true).size() \u003c= 1 : true"
                  },
                  {
                    "message": "spec.algorithm must be set to \"consistent-hashing\" when spec.hashOnFallback is set.",
                    "rule": "has(self.spec.hashOnFallback) ? has(self.spec.algorithm) \u0026\u0026 self.spec.algorithm == \"consistent-hashing\" : true"
                  },
                  {
                    "message": "spec.hashOnFallback.cookie must not be set.",
                    "rule": "has(self.spec.hashOnFallback) ? !has(self.spec.hashOnFallback.cookie) : true"
                  },
                  {
                    "message": "spec.hashOnFallback.cookiePath must not be set.",
                    "rule": "has(self.spec.hashOnFallback) ? !has(self.spec.hashOnFallback.cookiePath) : true"
                  },
                  {
                    "message": "spec.healthchecks.passive.healthy.interval must not be set.",
                    "rule": "has(self.spec.healthchecks) \u0026\u0026 has(self.spec.healthchecks.passive) \u0026\u0026 has(self.spec.healthchecks.passive.healthy) ? !has(self.spec.healthchecks.passive.healthy.interval) : true"
                  },
                  {
                    "message": "spec.healthchecks.passive.unhealthy.interval must not be set.",
                    "rule": "has(self.spec.healthchecks) \u0026\u0026 has(self.spec.healthchecks.passive) \u0026\u0026 has(self.spec.healthchecks.passive.unhealthy) ? !has(self.spec.healthchecks.passive.unhealthy.interval) : true"
                  },
                  {
                    "message": "spec.hashOnFallback must not be set when spec.hashOn.cookie is set.",
                    "rule": "has(self.spec.hashOn) \u0026\u0026 has(self.spec.hashOn.cookie) ? !has(self.spec.hashOnFallback) : true"
                  }
                ]
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_kongvaults.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "kongvaults.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "KongVault",
          "listKind": "KongVaultList",
          "plural": "kongvaults",
          "shortNames": [
            "kv"
          ],
          "singular": "kongvault"
        },
        "scope": "Cluster",
        "versions": [
          {
            "additionalPrinterColumns": [
              {
                "description": "Name of the backend of the vault",
                "jsonPath": ".spec.backend",
                "name": "Backend Type",
                "type": "string"
              },
              {
                "description": "Prefix of vault URI to reference the values in the vault",
                "jsonPath": ".spec.prefix",
                "name": "Prefix",
                "type": "string"
              },
              {
                "description": "Age",
                "jsonPath": ".metadata.creationTimestamp",
                "name": "Age",
                "type": "date"
              },
              {
                "description": "Description",
                "jsonPath": ".spec.description",
                "name": "Description",
                "priority": 1,
                "type": "string"
              },
              {
                "jsonPath": ".status.conditions[?(@.type==\"Programmed\")].status",
                "name": "Programmed",
                "type": "string"
              }
            ],
            "name": "v1alpha1",
            "schema": {
              "openAPIV3Schema": {
                "description": "KongVault is the schema for kongvaults API which defines a custom Kong vault.\nA Kong vault is a storage to store sensitive data, where the values can be referenced in configuration of plugins.\nSee: https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "KongVaultSpec defines specification of a custom Kong vault.",
                    "properties": {
                      "backend": {
                        "description": "Backend is the type of the backend storing the secrets in the vault.\nThe supported backends of Kong is listed here:\nhttps://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/backends/",
                        "minLength": 1,
                        "type": "string"
                      },
                      "config": {
                        "description": "Config is the configuration of the vault. Varies for different backends.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "description": {
                        "description": "Description is the additional information about the vault.",
                        "type": "string"
                      },
                      "prefix": {
                        "description": "Prefix is the prefix of vault URI for referencing values in the vault.\nIt is immutable after created.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "backend",
                      "prefix"
                    ],
                    "type": "object"
                  },
                  "status": {
                    "description": "KongVaultStatus represents the current status of the KongVault resource.",
                    "properties": {
                      "conditions": {
                        "default": [
                          {
                            "lastTransitionTime": "1970-01-01T00:00:00Z",
                            "message": "Waiting for controller",
                            "reason": "Pending",
                            "status": "Unknown",
                            "type": "Programmed"
                          }
                        ],
                        "description": "Conditions describe the current conditions of the KongVaultStatus.\n\n\nKnown condition types are:\n\n\n* \"Programmed\"",
                        "items": {
                          "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                          "properties": {
                            "lastTransitionTime": {
                              "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "message": {
                              "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                              "maxLength": 32768,
                              "type": "string"
                            },
                            "observedGeneration": {
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "reason": {
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                              "maxLength": 1024,
                              "minLength": 1,
                              "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                              "type": "string"
                            },
                            "status": {
                              "description": "status of the condition, one of True, False, Unknown.",
                              "enum": [
                                "True",
                                "False",
                                "Unknown"
                              ],
                              "type": "string"
                            },
                            "type": {
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                              "maxLength": 316,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                              "type": "string"
                            }
                          },
                          "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                          ],
                          "type": "object"
                        },
                        "maxItems": 8,
                        "type": "array",
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-list-type": "map"
                      }
                    },
                    "required": [
                      "conditions"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "spec"
                ],
                "type": "object",
                "x-kubernetes-validations": [
                  {
                    "message": "The spec.prefix field is immutable",
                    "rule": "self.spec.prefix == oldSelf.spec.prefix"
                  }
                ]
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_tcpingresses.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "tcpingresses.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "TCPIngress",
          "listKind": "TCPIngressList",
          "plural": "tcpingresses",
          "singular": "tcpingress"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "additionalPrinterColumns": [
              {
                "description": "Address of the load balancer",
                "jsonPath": ".status.loadBalancer.ingress[*].ip",
                "name": "Address",
                "type": "string"
              },
              {
                "description": "Age",
                "jsonPath": ".metadata.creationTimestamp",
                "name": "Age",
                "type": "date"
              }
            ],
            "name": "v1beta1",
            "schema": {
              "openAPIV3Schema": {
                "description": "TCPIngress is the Schema for the tcpingresses API.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "Spec is the TCPIngress specification.",
                    "properties": {
                      "rules": {
                        "description": "A list of rules used to configure the Ingress.",
                        "items": {
                          "description": "IngressRule represents a rule to apply against incoming requests.\nMatching is performed based on an (optional) SNI and port.",
                          "properties": {
                            "backend": {
                              "description": "Backend defines the referenced service endpoint to which the traffic\nwill be forwarded to.",
                              "properties": {
                                "serviceName": {
                                  "description": "Specifies the name of the referenced service.",
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "servicePort": {
                                  "description": "Specifies the port of the referenced service.",
                                  "format": "int32",
                                  "maximum": 65535,
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "serviceName",
                                "servicePort"
                              ],
                              "type": "object"
                            },
                            "host": {
                              "description": "Host is the fully qualified domain name of a network host, as defined\nby RFC 3986.\nIf a Host is not specified, then port-based TCP routing is performed. Kong\ndoesn't care about the content of the TCP stream in this case.\nIf a Host is specified, the protocol must be TLS over TCP.\nA plain-text TCP request cannot be routed based on Host. It can only\nbe routed based on Port.",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port is the port on which to accept TCP or TLS over TCP sessions and\nroute. It is a required field. If a Host is not specified, the requested\nare routed based only on Port.",
                              "format": "int32",
                              "maximum": 65535,
                              "minimum": 1,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "backend",
                            "port"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "tls": {
                        "description": "TLS configuration. This is similar to the `tls` section in the\nIngress resource in networking.v1beta1 group.\nThe mapping of SNIs to TLS cert-key pair defined here will be\nused for HTTP Ingress rules as well. Once can define the mapping in\nthis resource or the original Ingress resource, both have the same\neffect.",
                        "items": {
                          "description": "IngressTLS describes the transport layer security.",
                          "properties": {
                            "hosts": {
                              "description": "Hosts are a list of hosts included in the TLS certificate. The values in\nthis list must match the name/s used in the tlsSecret. Defaults to the\nwildcard host setting for the loadbalancer controller fulfilling this\nIngress, if left unspecified.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "secretName": {
                              "description": "SecretName is the name of the secret used to terminate SSL traffic.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "status": {
                    "description": "TCPIngressStatus defines the observed state of TCPIngress.",
                    "properties": {
                      "loadBalancer": {
                        "description": "LoadBalancer contains the current status of the load-balancer.",
                        "properties": {
                          "ingress": {
                            "description": "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points.",
                            "items": {
                              "description": "LoadBalancerIngress represents the status of a load-balancer ingress point:\ntraffic intended for the service should be sent to an ingress point.",
                              "properties": {
                                "hostname": {
                                  "description": "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)",
                                  "type": "string"
                                },
                                "ip": {
                                  "description": "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)",
                                  "type": "string"
                                },
                                "ipMode": {
                                  "description": "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.\nSetting this to \"VIP\" indicates that traffic is delivered to the node with\nthe destination set to the load-balancer's IP and port.\nSetting this to \"Proxy\" indicates that traffic is delivered to the node or pod with\nthe destination set to the node's IP and node port or the pod's IP and port.\nService implementations may use this information to adjust traffic routing.",
                                  "type": "string"
                                },
                                "ports": {
                                  "description": "Ports is a list of records of service ports\nIf used, every port defined in the service should have an entry in it",
                                  "items": {
                                    "properties": {
                                      "error": {
                                        "description": "Error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                        "maxLength": 316,
                                        "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                                        "type": "string"
                                      },
                                      "port": {
                                        "description": "Port is the port number of the service port of which status is recorded here",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "protocol": {
                                        "default": "TCP",
                                        "description": "Protocol is the protocol of the service port of which status is recorded here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\"",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "port",
                                      "protocol"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array",
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "custom_resource_definition_udpingresses.configuration.konghq.com": {
      "apiVersion": "apiextensions.k8s.io/v1",
      "kind": "CustomResourceDefinition",
      "metadata": {
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.14.0"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "Helmraiser"
        },
        "name": "udpingresses.configuration.konghq.com"
      },
      "spec": {
        "group": "configuration.konghq.com",
        "names": {
          "categories": [
            "kong-ingress-controller"
          ],
          "kind": "UDPIngress",
          "listKind": "UDPIngressList",
          "plural": "udpingresses",
          "singular": "udpingress"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "additionalPrinterColumns": [
              {
                "description": "Address of the load balancer",
                "jsonPath": ".status.loadBalancer.ingress[*].ip",
                "name": "Address",
                "type": "string"
              },
              {
                "description": "Age",
                "jsonPath": ".metadata.creationTimestamp",
                "name": "Age",
                "type": "date"
              }
            ],
            "name": "v1beta1",
            "schema": {
              "openAPIV3Schema": {
                "description": "UDPIngress is the Schema for the udpingresses API.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "Spec is the UDPIngress specification.",
                    "properties": {
                      "rules": {
                        "description": "A list of rules used to configure the Ingress.",
                        "items": {
                          "description": "UDPIngressRule represents a rule to apply against incoming requests\nwherein no Host matching is available for request routing, only the port\nis used to match requests.",
                          "properties": {
                            "backend": {
                              "description": "Backend defines the Kubernetes service which accepts traffic from the\nlistening Port defined above.",
                              "properties": {
                                "serviceName": {
                                  "description": "Specifies the name of the referenced service.",
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "servicePort": {
                                  "description": "Specifies the port of the referenced service.",
                                  "format": "int32",
                                  "maximum": 65535,
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "serviceName",
                                "servicePort"
                              ],
                              "type": "object"
                            },
                            "port": {
                              "description": "Port indicates the port for the Kong proxy to accept incoming traffic\non, which will then be routed to the service Backend.",
                              "format": "int32",
                              "maximum": 65535,
                              "minimum": 1,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "backend",
                            "port"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "status": {
                    "description": "UDPIngressStatus defines the observed state of UDPIngress.",
                    "properties": {
                      "loadBalancer": {
                        "description": "LoadBalancer contains the current status of the load-balancer.",
                        "properties": {
                          "ingress": {
                            "description": "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points.",
                            "items": {
                              "description": "LoadBalancerIngress represents the status of a load-balancer ingress point:\ntraffic intended for the service should be sent to an ingress point.",
                              "properties": {
                                "hostname": {
                                  "description": "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)",
                                  "type": "string"
                                },
                                "ip": {
                                  "description": "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)",
                                  "type": "string"
                                },
                                "ipMode": {
                                  "description": "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.\nSetting this to \"VIP\" indicates that traffic is delivered to the node with\nthe destination set to the load-balancer's IP and port.\nSetting this to \"Proxy\" indicates that traffic is delivered to the node or pod with\nthe destination set to the node's IP and node port or the pod's IP and port.\nService implementations may use this information to adjust traffic routing.",
                                  "type": "string"
                                },
                                "ports": {
                                  "description": "Ports is a list of records of service ports\nIf used, every port defined in the service should have an entry in it",
                                  "items": {
                                    "properties": {
                                      "error": {
                                        "description": "Error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                        "maxLength": 316,
                                        "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                                        "type": "string"
                                      },
                                      "port": {
                                        "description": "Port is the port number of the service port of which status is recorded here",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "protocol": {
                                        "default": "TCP",
                                        "description": "Protocol is the protocol of the service port of which status is recorded here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\"",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "port",
                                      "protocol"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array",
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "served": true,
            "storage": true,
            "subresources": {
              "status": {}
            }
          }
        ]
      }
    },
    "deployment_kubernetes_dashboard_api": {
      "apiVersion": "apps/v1",
      "kind": "Deployment",
      "metadata": {
        "annotations": null,
        "labels": {
          "app.kubernetes.io/component": "api",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kubernetes-dashboard-api",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "app.kubernetes.io/version": "1.4.1",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-api"
      },
      "spec": {
        "replicas": 1,
        "revisionHistoryLimit": 10,
        "selector": {
          "matchLabels": {
            "app.kubernetes.io/instance": "kubernetes-dashboard",
            "app.kubernetes.io/name": "kubernetes-dashboard-api",
            "app.kubernetes.io/part-of": "kubernetes-dashboard"
          }
        },
        "template": {
          "metadata": {
            "annotations": {
              "checksum/config": "d0df6d34ca9854a0ed7987ac4b0f7e6d258d801a791d7ba25ba8cd727021d586"
            },
            "labels": {
              "app.kubernetes.io/component": "api",
              "app.kubernetes.io/instance": "kubernetes-dashboard",
              "app.kubernetes.io/managed-by": "Helm",
              "app.kubernetes.io/name": "kubernetes-dashboard-api",
              "app.kubernetes.io/part-of": "kubernetes-dashboard",
              "app.kubernetes.io/version": "1.4.1",
              "helm.sh/chart": "kubernetes-dashboard-7.2.0"
            }
          },
          "spec": {
            "automountServiceAccountToken": true,
            "containers": [
              {
                "args": [
                  "--namespace=kubernetes-dashboard",
                  "--metrics-scraper-service-name=kubernetes-dashboard-metrics-scraper"
                ],
                "env": [
                  {
                    "name": "CSRF_KEY",
                    "valueFrom": {
                      "secretKeyRef": {
                        "key": "private.key",
                        "name": "kubernetes-dashboard-csrf"
                      }
                    }
                  }
                ],
                "image": "docker.io/kubernetesui/dashboard-api:1.4.1",
                "imagePullPolicy": "IfNotPresent",
                "name": "kubernetes-dashboard-api",
                "ports": [
                  {
                    "containerPort": 8000,
                    "name": "api",
                    "protocol": "TCP"
                  }
                ],
                "resources": {
                  "limits": {
                    "cpu": "250m",
                    "memory": "400Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "200Mi"
                  }
                },
                "securityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "readOnlyRootFilesystem": true,
                  "runAsGroup": 2001,
                  "runAsUser": 1001
                },
                "volumeMounts": [
                  {
                    "mountPath": "/tmp",
                    "name": "tmp-volume"
                  }
                ]
              }
            ],
            "securityContext": {
              "runAsNonRoot": true,
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "serviceAccountName": "kubernetes-dashboard-api",
            "volumes": [
              {
                "emptyDir": {},
                "name": "tmp-volume"
              }
            ]
          }
        }
      }
    },
    "deployment_kubernetes_dashboard_auth": {
      "apiVersion": "apps/v1",
      "kind": "Deployment",
      "metadata": {
        "annotations": null,
        "labels": {
          "app.kubernetes.io/component": "auth",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kubernetes-dashboard-auth",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "app.kubernetes.io/version": "1.4.1",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-auth"
      },
      "spec": {
        "replicas": 1,
        "revisionHistoryLimit": 10,
        "selector": {
          "matchLabels": {
            "app.kubernetes.io/instance": "kubernetes-dashboard",
            "app.kubernetes.io/name": "kubernetes-dashboard-auth",
            "app.kubernetes.io/part-of": "kubernetes-dashboard"
          }
        },
        "template": {
          "metadata": {
            "annotations": {
              "checksum/config": "ad17a5ed3f844a0ce65a3a228743d8bb2828caafb0cecc977bd1dad713e83478"
            },
            "labels": {
              "app.kubernetes.io/component": "auth",
              "app.kubernetes.io/instance": "kubernetes-dashboard",
              "app.kubernetes.io/managed-by": "Helm",
              "app.kubernetes.io/name": "kubernetes-dashboard-auth",
              "app.kubernetes.io/part-of": "kubernetes-dashboard",
              "app.kubernetes.io/version": "1.1.2",
              "helm.sh/chart": "kubernetes-dashboard-7.2.0"
            }
          },
          "spec": {
            "automountServiceAccountToken": true,
            "containers": [
              {
                "args": null,
                "env": [
                  {
                    "name": "CSRF_KEY",
                    "valueFrom": {
                      "secretKeyRef": {
                        "key": "private.key",
                        "name": "kubernetes-dashboard-csrf"
                      }
                    }
                  }
                ],
                "image": "docker.io/kubernetesui/dashboard-auth:1.1.2",
                "imagePullPolicy": "IfNotPresent",
                "name": "kubernetes-dashboard-auth",
                "ports": [
                  {
                    "containerPort": 8000,
                    "name": "auth",
                    "protocol": "TCP"
                  }
                ],
                "resources": {
                  "limits": {
                    "cpu": "250m",
                    "memory": "400Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "200Mi"
                  }
                },
                "securityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "readOnlyRootFilesystem": true,
                  "runAsGroup": 2001,
                  "runAsUser": 1001
                },
                "volumeMounts": [
                  {
                    "mountPath": "/tmp",
                    "name": "tmp-volume"
                  }
                ]
              }
            ],
            "securityContext": {
              "runAsNonRoot": true,
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "volumes": [
              {
                "emptyDir": {},
                "name": "tmp-volume"
              }
            ]
          }
        }
      }
    },
    "deployment_kubernetes_dashboard_kong": {
      "apiVersion": "apps/v1",
      "kind": "Deployment",
      "metadata": {
        "labels": {
          "app.kubernetes.io/component": "app",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kong",
          "app.kubernetes.io/version": "3.6",
          "helm.sh/chart": "kong-2.38.0"
        },
        "name": "kubernetes-dashboard-kong",
        "namespace": "kubernetes-dashboard"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "matchLabels": {
            "app.kubernetes.io/component": "app",
            "app.kubernetes.io/instance": "kubernetes-dashboard",
            "app.kubernetes.io/name": "kong"
          }
        },
        "template": {
          "metadata": {
            "annotations": {
              "kuma.io/gateway": "enabled",
              "kuma.io/service-account-token-volume": "kubernetes-dashboard-kong-token",
              "traffic.sidecar.istio.io/includeInboundPorts": ""
            },
            "labels": {
              "app": "kubernetes-dashboard-kong",
              "app.kubernetes.io/component": "app",
              "app.kubernetes.io/instance": "kubernetes-dashboard",
              "app.kubernetes.io/managed-by": "Helm",
              "app.kubernetes.io/name": "kong",
              "app.kubernetes.io/version": "3.6",
              "helm.sh/chart": "kong-2.38.0",
              "version": "3.6"
            }
          },
          "spec": {
            "automountServiceAccountToken": false,
            "containers": [
              {
                "env": [
                  {
                    "name": "KONG_ADMIN_ACCESS_LOG",
                    "value": "/dev/stdout"
                  },
                  {
                    "name": "KONG_ADMIN_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_ADMIN_GUI_ACCESS_LOG",
                    "value": "/dev/stdout"
                  },
                  {
                    "name": "KONG_ADMIN_GUI_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_ADMIN_LISTEN",
                    "value": "127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl"
                  },
                  {
                    "name": "KONG_CLUSTER_LISTEN",
                    "value": "off"
                  },
                  {
                    "name": "KONG_DATABASE",
                    "value": "off"
                  },
                  {
                    "name": "KONG_DECLARATIVE_CONFIG",
                    "value": "/kong_dbless/kong.yml"
                  },
                  {
                    "name": "KONG_DNS_ORDER",
                    "value": "A,CNAME,LAST,AAAA,SRV"
                  },
                  {
                    "name": "KONG_LUA_PACKAGE_PATH",
                    "value": "/opt/?.lua;/opt/?/init.lua;;"
                  },
                  {
                    "name": "KONG_NGINX_WORKER_PROCESSES",
                    "value": "1"
                  },
                  {
                    "name": "KONG_PLUGINS",
                    "value": "off"
                  },
                  {
                    "name": "KONG_PORTAL_API_ACCESS_LOG",
                    "value": "/dev/stdout"
                  },
                  {
                    "name": "KONG_PORTAL_API_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_PORT_MAPS",
                    "value": "443:8443"
                  },
                  {
                    "name": "KONG_PREFIX",
                    "value": "/kong_prefix/"
                  },
                  {
                    "name": "KONG_PROXY_ACCESS_LOG",
                    "value": "/dev/stdout"
                  },
                  {
                    "name": "KONG_PROXY_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_PROXY_LISTEN",
                    "value": "0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
                  },
                  {
                    "name": "KONG_PROXY_STREAM_ACCESS_LOG",
                    "value": "/dev/stdout basic"
                  },
                  {
                    "name": "KONG_PROXY_STREAM_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_ROUTER_FLAVOR",
                    "value": "traditional"
                  },
                  {
                    "name": "KONG_STATUS_ACCESS_LOG",
                    "value": "off"
                  },
                  {
                    "name": "KONG_STATUS_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_STATUS_LISTEN",
                    "value": "0.0.0.0:8100, [::]:8100"
                  },
                  {
                    "name": "KONG_STREAM_LISTEN",
                    "value": "off"
                  },
                  {
                    "name": "KONG_NGINX_DAEMON",
                    "value": "off"
                  }
                ],
                "image": "kong:3.6",
                "imagePullPolicy": "IfNotPresent",
                "lifecycle": {
                  "preStop": {
                    "exec": {
                      "command": [
                        "kong",
                        "quit",
                        "--wait=15"
                      ]
                    }
                  }
                },
                "livenessProbe": {
                  "failureThreshold": 3,
                  "httpGet": {
                    "path": "/status",
                    "port": "status",
                    "scheme": "HTTP"
                  },
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "name": "proxy",
                "ports": [
                  {
                    "containerPort": 8443,
                    "name": "proxy-tls",
                    "protocol": "TCP"
                  },
                  {
                    "containerPort": 8100,
                    "name": "status",
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "failureThreshold": 3,
                  "httpGet": {
                    "path": "/status/ready",
                    "port": "status",
                    "scheme": "HTTP"
                  },
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "resources": {},
                "securityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "readOnlyRootFilesystem": true,
                  "runAsNonRoot": true,
                  "runAsUser": 1000,
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "volumeMounts": [
                  {
                    "mountPath": "/kong_prefix/",
                    "name": "kubernetes-dashboard-kong-prefix-dir"
                  },
                  {
                    "mountPath": "/tmp",
                    "name": "kubernetes-dashboard-kong-tmp"
                  },
                  {
                    "mountPath": "/kong_dbless/",
                    "name": "kong-custom-dbless-config-volume"
                  }
                ]
              }
            ],
            "initContainers": [
              {
                "command": [
                  "rm",
                  "-vrf",
                  "$KONG_PREFIX/pids"
                ],
                "env": [
                  {
                    "name": "KONG_ADMIN_ACCESS_LOG",
                    "value": "/dev/stdout"
                  },
                  {
                    "name": "KONG_ADMIN_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_ADMIN_GUI_ACCESS_LOG",
                    "value": "/dev/stdout"
                  },
                  {
                    "name": "KONG_ADMIN_GUI_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_ADMIN_LISTEN",
                    "value": "127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl"
                  },
                  {
                    "name": "KONG_CLUSTER_LISTEN",
                    "value": "off"
                  },
                  {
                    "name": "KONG_DATABASE",
                    "value": "off"
                  },
                  {
                    "name": "KONG_DECLARATIVE_CONFIG",
                    "value": "/kong_dbless/kong.yml"
                  },
                  {
                    "name": "KONG_DNS_ORDER",
                    "value": "A,CNAME,LAST,AAAA,SRV"
                  },
                  {
                    "name": "KONG_LUA_PACKAGE_PATH",
                    "value": "/opt/?.lua;/opt/?/init.lua;;"
                  },
                  {
                    "name": "KONG_NGINX_WORKER_PROCESSES",
                    "value": "1"
                  },
                  {
                    "name": "KONG_PLUGINS",
                    "value": "off"
                  },
                  {
                    "name": "KONG_PORTAL_API_ACCESS_LOG",
                    "value": "/dev/stdout"
                  },
                  {
                    "name": "KONG_PORTAL_API_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_PORT_MAPS",
                    "value": "443:8443"
                  },
                  {
                    "name": "KONG_PREFIX",
                    "value": "/kong_prefix/"
                  },
                  {
                    "name": "KONG_PROXY_ACCESS_LOG",
                    "value": "/dev/stdout"
                  },
                  {
                    "name": "KONG_PROXY_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_PROXY_LISTEN",
                    "value": "0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
                  },
                  {
                    "name": "KONG_PROXY_STREAM_ACCESS_LOG",
                    "value": "/dev/stdout basic"
                  },
                  {
                    "name": "KONG_PROXY_STREAM_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_ROUTER_FLAVOR",
                    "value": "traditional"
                  },
                  {
                    "name": "KONG_STATUS_ACCESS_LOG",
                    "value": "off"
                  },
                  {
                    "name": "KONG_STATUS_ERROR_LOG",
                    "value": "/dev/stderr"
                  },
                  {
                    "name": "KONG_STATUS_LISTEN",
                    "value": "0.0.0.0:8100, [::]:8100"
                  },
                  {
                    "name": "KONG_STREAM_LISTEN",
                    "value": "off"
                  }
                ],
                "image": "kong:3.6",
                "imagePullPolicy": "IfNotPresent",
                "name": "clear-stale-pid",
                "resources": {},
                "securityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "readOnlyRootFilesystem": true,
                  "runAsNonRoot": true,
                  "runAsUser": 1000,
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "volumeMounts": [
                  {
                    "mountPath": "/kong_prefix/",
                    "name": "kubernetes-dashboard-kong-prefix-dir"
                  },
                  {
                    "mountPath": "/tmp",
                    "name": "kubernetes-dashboard-kong-tmp"
                  },
                  {
                    "mountPath": "/kong_dbless/",
                    "name": "kong-custom-dbless-config-volume"
                  }
                ]
              }
            ],
            "securityContext": {},
            "serviceAccountName": "kubernetes-dashboard-kong",
            "terminationGracePeriodSeconds": 30,
            "volumes": [
              {
                "emptyDir": {
                  "sizeLimit": "256Mi"
                },
                "name": "kubernetes-dashboard-kong-prefix-dir"
              },
              {
                "emptyDir": {
                  "sizeLimit": "1Gi"
                },
                "name": "kubernetes-dashboard-kong-tmp"
              },
              {
                "name": "kubernetes-dashboard-kong-token",
                "projected": {
                  "sources": [
                    {
                      "serviceAccountToken": {
                        "expirationSeconds": 3607,
                        "path": "token"
                      }
                    },
                    {
                      "configMap": {
                        "items": [
                          {
                            "key": "ca.crt",
                            "path": "ca.crt"
                          }
                        ],
                        "name": "kube-root-ca.crt"
                      }
                    },
                    {
                      "downwardAPI": {
                        "items": [
                          {
                            "fieldRef": {
                              "apiVersion": "v1",
                              "fieldPath": "metadata.namespace"
                            },
                            "path": "namespace"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "configMap": {
                  "name": "kong-dbless-config"
                },
                "name": "kong-custom-dbless-config-volume"
              }
            ]
          }
        }
      }
    },
    "deployment_kubernetes_dashboard_metrics_scraper": {
      "apiVersion": "apps/v1",
      "kind": "Deployment",
      "metadata": {
        "annotations": null,
        "labels": {
          "app.kubernetes.io/component": "metrics-scraper",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kubernetes-dashboard-metrics-scraper",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "app.kubernetes.io/version": "1.1.1",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-metrics-scraper"
      },
      "spec": {
        "replicas": 1,
        "revisionHistoryLimit": 10,
        "selector": {
          "matchLabels": {
            "app.kubernetes.io/instance": "kubernetes-dashboard",
            "app.kubernetes.io/name": "kubernetes-dashboard-metrics-scraper",
            "app.kubernetes.io/part-of": "kubernetes-dashboard"
          }
        },
        "template": {
          "metadata": {
            "annotations": null,
            "labels": {
              "app.kubernetes.io/component": "metrics-scraper",
              "app.kubernetes.io/instance": "kubernetes-dashboard",
              "app.kubernetes.io/managed-by": "Helm",
              "app.kubernetes.io/name": "kubernetes-dashboard-metrics-scraper",
              "app.kubernetes.io/part-of": "kubernetes-dashboard",
              "app.kubernetes.io/version": "1.1.1",
              "helm.sh/chart": "kubernetes-dashboard-7.2.0"
            }
          },
          "spec": {
            "automountServiceAccountToken": true,
            "containers": [
              {
                "image": "docker.io/kubernetesui/dashboard-metrics-scraper:1.1.1",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "httpGet": {
                    "path": "/",
                    "port": 8000,
                    "scheme": "HTTP"
                  },
                  "initialDelaySeconds": 30,
                  "timeoutSeconds": 30
                },
                "name": "kubernetes-dashboard-metrics-scraper",
                "ports": [
                  {
                    "containerPort": 8000,
                    "protocol": "TCP"
                  }
                ],
                "resources": {
                  "limits": {
                    "cpu": "250m",
                    "memory": "400Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "200Mi"
                  }
                },
                "securityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "readOnlyRootFilesystem": true,
                  "runAsGroup": 2001,
                  "runAsUser": 1001
                },
                "volumeMounts": [
                  {
                    "mountPath": "/tmp",
                    "name": "tmp-volume"
                  }
                ]
              }
            ],
            "securityContext": {
              "runAsNonRoot": true,
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "serviceAccountName": "kubernetes-dashboard-metrics-scraper",
            "volumes": [
              {
                "emptyDir": {},
                "name": "tmp-volume"
              }
            ]
          }
        }
      }
    },
    "deployment_kubernetes_dashboard_web": {
      "apiVersion": "apps/v1",
      "kind": "Deployment",
      "metadata": {
        "annotations": null,
        "labels": {
          "app.kubernetes.io/component": "web",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kubernetes-dashboard-web",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "app.kubernetes.io/version": "1.2.3",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-web"
      },
      "spec": {
        "replicas": 1,
        "revisionHistoryLimit": 10,
        "selector": {
          "matchLabels": {
            "app.kubernetes.io/instance": "kubernetes-dashboard",
            "app.kubernetes.io/name": "kubernetes-dashboard-web",
            "app.kubernetes.io/part-of": "kubernetes-dashboard"
          }
        },
        "template": {
          "metadata": {
            "annotations": null,
            "labels": {
              "app.kubernetes.io/component": "web",
              "app.kubernetes.io/instance": "kubernetes-dashboard",
              "app.kubernetes.io/managed-by": "Helm",
              "app.kubernetes.io/name": "kubernetes-dashboard-web",
              "app.kubernetes.io/part-of": "kubernetes-dashboard",
              "app.kubernetes.io/version": "1.2.3",
              "helm.sh/chart": "kubernetes-dashboard-7.2.0"
            }
          },
          "spec": {
            "automountServiceAccountToken": true,
            "containers": [
              {
                "args": [
                  "--namespace=kubernetes-dashboard",
                  "--settings-config-map-name=kubernetes-dashboard-web-settings"
                ],
                "image": "docker.io/kubernetesui/dashboard-web:1.2.3",
                "imagePullPolicy": "IfNotPresent",
                "name": "kubernetes-dashboard-web",
                "ports": [
                  {
                    "containerPort": 8000,
                    "name": "web",
                    "protocol": "TCP"
                  }
                ],
                "resources": {
                  "limits": {
                    "cpu": "250m",
                    "memory": "400Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "200Mi"
                  }
                },
                "securityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "readOnlyRootFilesystem": true,
                  "runAsGroup": 2001,
                  "runAsUser": 1001
                },
                "volumeMounts": [
                  {
                    "mountPath": "/tmp",
                    "name": "tmp-volume"
                  }
                ]
              }
            ],
            "securityContext": {
              "runAsNonRoot": true,
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "serviceAccountName": "kubernetes-dashboard-web",
            "volumes": [
              {
                "emptyDir": {},
                "name": "tmp-volume"
              }
            ]
          }
        }
      }
    },
    "role_binding_kubernetes_dashboard_api": {
      "apiVersion": "rbac.authorization.k8s.io/v1",
      "kind": "RoleBinding",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-api"
      },
      "roleRef": {
        "apiGroup": "rbac.authorization.k8s.io",
        "kind": "Role",
        "name": "kubernetes-dashboard-api"
      },
      "subjects": [
        {
          "kind": "ServiceAccount",
          "name": "kubernetes-dashboard-api"
        }
      ]
    },
    "role_binding_kubernetes_dashboard_web": {
      "apiVersion": "rbac.authorization.k8s.io/v1",
      "kind": "RoleBinding",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-web"
      },
      "roleRef": {
        "apiGroup": "rbac.authorization.k8s.io",
        "kind": "Role",
        "name": "kubernetes-dashboard-web"
      },
      "subjects": [
        {
          "kind": "ServiceAccount",
          "name": "kubernetes-dashboard-web"
        }
      ]
    },
    "role_kubernetes_dashboard_api": {
      "apiVersion": "rbac.authorization.k8s.io/v1",
      "kind": "Role",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-api"
      },
      "rules": [
        {
          "apiGroups": [
            ""
          ],
          "resourceNames": [
            "kubernetes-dashboard-metrics-scraper",
            "http:kubernetes-dashboard-metrics-scraper"
          ],
          "resources": [
            "services/proxy"
          ],
          "verbs": [
            "get"
          ]
        }
      ]
    },
    "role_kubernetes_dashboard_web": {
      "apiVersion": "rbac.authorization.k8s.io/v1",
      "kind": "Role",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-web"
      },
      "rules": [
        {
          "apiGroups": [
            ""
          ],
          "resourceNames": [
            "kubernetes-dashboard-web-settings"
          ],
          "resources": [
            "configmaps"
          ],
          "verbs": [
            "get",
            "update"
          ]
        }
      ]
    },
    "secret_kubernetes_dashboard_csrf": {
      "apiVersion": "v1",
      "data": {
        "private.key": "WDN6ZFc3YytwRDZ5bEVtQjdnR09GWGozdCtoNzdpdTZnY1ZzaXN0amtCRUlCRDJyb0FwYnR5QzFpdmJ1S2ttQmRFV0JPSEpsTDZ0aHRvMHhERnpXU3VvL01CRWxmM1lrTjVuN21Vd1hIZkxFWHphM244dEJEbWVJdnJiUXpCV3UxMFNiSmZ4SmJIdThZblJmRDE0a3VKNDhERHdTTUt6cytmNnV0SUZhMFlmR1FORlk2SzJiVys5SWF3RzM5WUh0YWFMTzl1djg5eFZmNHc1L25Sa1VMa2xWZVRnMmxQSklyNzdRenQ1OVVSMHZ6eUlsMUtCeWhvcTZYUEtURjNkVDZxZUdiaGNEeWRKRHo1ZGhNdnRNNGJhTW5MNlYrWnpPNjYrT2xWZUUzbDlVMEtkcTEwRXN4NlhOYXUvQ2NSK3JucnlndWRZUG9KQkNuWDVWT2NIUVJ3PT0="
      },
      "kind": "Secret",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-csrf"
      }
    },
    "service_account_kubernetes_dashboard_api": {
      "apiVersion": "v1",
      "kind": "ServiceAccount",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-api"
      }
    },
    "service_account_kubernetes_dashboard_kong": {
      "apiVersion": "v1",
      "kind": "ServiceAccount",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kong",
          "app.kubernetes.io/version": "3.6",
          "helm.sh/chart": "kong-2.38.0"
        },
        "name": "kubernetes-dashboard-kong",
        "namespace": "kubernetes-dashboard"
      }
    },
    "service_account_kubernetes_dashboard_metrics_scraper": {
      "apiVersion": "v1",
      "kind": "ServiceAccount",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-metrics-scraper"
      }
    },
    "service_account_kubernetes_dashboard_web": {
      "apiVersion": "v1",
      "kind": "ServiceAccount",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-web"
      }
    },
    "service_kubernetes_dashboard_api": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "app.kubernetes.io/component": "api",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kubernetes-dashboard-api",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "app.kubernetes.io/version": "1.4.1",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-api"
      },
      "spec": {
        "ports": [
          {
            "name": "api",
            "port": 8000
          }
        ],
        "selector": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/name": "kubernetes-dashboard-api",
          "app.kubernetes.io/part-of": "kubernetes-dashboard"
        }
      }
    },
    "service_kubernetes_dashboard_auth": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "app.kubernetes.io/component": "auth",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kubernetes-dashboard-auth",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "app.kubernetes.io/version": "1.1.2",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-auth"
      },
      "spec": {
        "ports": [
          {
            "name": "auth",
            "port": 8000
          }
        ],
        "selector": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/name": "kubernetes-dashboard-auth",
          "app.kubernetes.io/part-of": "kubernetes-dashboard"
        }
      }
    },
    "service_kubernetes_dashboard_kong_manager": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kong",
          "app.kubernetes.io/version": "3.6",
          "helm.sh/chart": "kong-2.38.0"
        },
        "name": "kubernetes-dashboard-kong-manager",
        "namespace": "kubernetes-dashboard"
      },
      "spec": {
        "ports": [
          {
            "name": "kong-manager",
            "port": 8002,
            "protocol": "TCP",
            "targetPort": 8002
          },
          {
            "name": "kong-manager-tls",
            "port": 8445,
            "protocol": "TCP",
            "targetPort": 8445
          }
        ],
        "selector": {
          "app.kubernetes.io/component": "app",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/name": "kong"
        },
        "type": "NodePort"
      }
    },
    "service_kubernetes_dashboard_kong_proxy": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kong",
          "app.kubernetes.io/version": "3.6",
          "enable-metrics": "true",
          "helm.sh/chart": "kong-2.38.0"
        },
        "name": "kubernetes-dashboard-kong-proxy",
        "namespace": "kubernetes-dashboard"
      },
      "spec": {
        "ports": [
          {
            "name": "kong-proxy-tls",
            "port": 443,
            "protocol": "TCP",
            "targetPort": 8443
          }
        ],
        "selector": {
          "app.kubernetes.io/component": "app",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/name": "kong"
        },
        "type": "ClusterIP"
      }
    },
    "service_kubernetes_dashboard_metrics_scraper": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "app.kubernetes.io/component": "metrics-scraper",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kubernetes-dashboard-metrics-scraper",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "app.kubernetes.io/version": "1.1.1",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-metrics-scraper"
      },
      "spec": {
        "ports": [
          {
            "port": 8000
          }
        ],
        "selector": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/name": "kubernetes-dashboard-metrics-scraper",
          "app.kubernetes.io/part-of": "kubernetes-dashboard"
        }
      }
    },
    "service_kubernetes_dashboard_web": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "app.kubernetes.io/component": "web",
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/managed-by": "Helmraiser",
          "app.kubernetes.io/name": "kubernetes-dashboard-web",
          "app.kubernetes.io/part-of": "kubernetes-dashboard",
          "app.kubernetes.io/version": "1.2.3",
          "helm.sh/chart": "kubernetes-dashboard-7.2.0"
        },
        "name": "kubernetes-dashboard-web"
      },
      "spec": {
        "ports": [
          {
            "name": "web",
            "port": 8000
          }
        ],
        "selector": {
          "app.kubernetes.io/instance": "kubernetes-dashboard",
          "app.kubernetes.io/name": "kubernetes-dashboard-web",
          "app.kubernetes.io/part-of": "kubernetes-dashboard"
        }
      }
    }
  },
  "kind": "Environment",
  "metadata": {
    "name": "environment/default"
  },
  "spec": {
    "apiServer": "https://192.168.8.145:6443",
    "namespace": "kubernetes-dashboard"
  }
}